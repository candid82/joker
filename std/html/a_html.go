// This file is generated by generate-std.joke script. Do not edit manually!

package html

import (
	. "github.com/candid82/joker/core"
	"html"
)

var htmlNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("joker.html"))

var __escape__P ProcFn = __escape_
var escape_ Proc = Proc{Fn: __escape__P, Name: "escape_", Package: "std/html"}

func __escape_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		s := ExtractString(_args, 0)
		_res := html.EscapeString(s)
		return MakeString(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var __unescape__P ProcFn = __unescape_
var unescape_ Proc = Proc{Fn: __unescape__P, Name: "unescape_", Package: "std/html"}

func __unescape_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		s := ExtractString(_args, 0)
		_res := html.UnescapeString(s)
		return MakeString(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {

	htmlNamespace.ResetMeta(MakeMeta(nil, `Provides functions for escaping and unescaping HTML text.`, "1.0"))

	htmlNamespace.InternVar("escape", escape_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("s"))),
			`Escapes special characters like < to become &lt;. It escapes only five such characters: <, >, &, ' and ".`, "1.0").Plus(MakeKeyword("tag"), String{S: "String"}))

	htmlNamespace.InternVar("unescape", unescape_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("s"))),
			`Unescapes entities like &lt; to become <.`, "1.0").Plus(MakeKeyword("tag"), String{S: "String"}))

}

func init() {
	htmlNamespace.Lazy = Init
}
