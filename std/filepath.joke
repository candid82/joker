(ns ^{:go-imports ["path/filepath"]
      :doc "Implements utility routines for manipulating filename paths."}
  filepath)

(defn file-seq
  "Returns a seq of maps with info about files or directories under root."
  {:added "1.0"
   :go "fileSeq(root)"}
  [^String root])

(defn ^String abs
  "Returns an absolute representation of path. If the path is not absolute it will be
  joined with the current working directory to turn it into an absolute path.
  The absolute path name for a given file is not guaranteed to be unique.
  Calls clean on the result."
  {:added "1.0"
   :go "! _res, err := filepath.Abs(path); PanicOnErr(err)"}
  [^String path])

(defn ^String base
  "Returns the last element of path. Trailing path separators are removed before
  extracting the last element. If the path is empty, returns \".\". If the path consists
  entirely of separators, returns a single separator."
  {:added "1.0"
   :go "filepath.Base(path)"}
  [^String path])

(defn ^String clean
  "Returns the shortest path name equivalent to path by purely lexical processing.
  Applies the following rules iteratively until no further processing can be done:

1. Replace multiple separator elements with a single one.
2. Eliminate each . path name element (the current directory).
3. Eliminate each inner .. path name element (the parent directory)
   along with the non-.. element that precedes it.
4. Eliminate .. elements that begin a rooted path:
   that is, replace \"/..\" by \"/\" at the beginning of a path,
   assuming separator is '/'.
The returned path ends in a slash only if it represents a root directory, such as \"/\" on Unix or `C:\\` on Windows.

Finally, any occurrences of slash are replaced by separator.

If the result of this process is an empty string, returns the string \".\"."
  {:added "1.0"
   :go "filepath.Clean(path)"}
  [^String path])

(defn ^String dir
  "Returns all but the last element of path, typically the path's directory.
  After dropping the final element, calls clean on the path and trailing slashes are removed.
  If the path is empty, returns \".\". If the path consists entirely of separators,
  returns a single separator. The returned path does not end in a separator unless it is the root directory."
  {:added "1.0"
   :go "filepath.Dir(path)"}
  [^String path])

(defn ^String eval-symlinks
  "Returns the path name after the evaluation of any symbolic links. If path is relative the result will be
  relative to the current directory, unless one of the components is an absolute symbolic link.
  Calls clean on the result."
  {:added "1.0"
   :go "! _res, err := filepath.EvalSymlinks(path); PanicOnErr(err)"}
  [^String path])

(defn ^String ext
  "Returns the file name extension used by path. The extension is the suffix beginning at the final dot
  in the final element of path; it is empty if there is no dot."
  {:added "1.0"
   :go "filepath.Ext(path)"}
  [^String path])

(defn ^String from-slash
  "Returns the result of replacing each slash ('/') character in path with a separator character.
  Multiple slashes are replaced by multiple separators."
  {:added "1.0"
   :go "filepath.FromSlash(path)"}
  [^String path])

(defn ^{:tag [String]} glob
  "Returns the names of all files matching pattern or nil if there is no matching file.
  The syntax of patterns is the same as in Match. The pattern may describe hierarchical
  names such as /usr/*/bin/ed (assuming the separator is '/').

  Ignores file system errors such as I/O errors reading directories.
  Throws exception when pattern is malformed."
  {:added "1.0"
   :go "! _res, err := filepath.Glob(pattern); PanicOnErr(err)"}
  [^String pattern])

(defn ^Boolean abs?
  "Reports whether the path is absolute."
  {:added "1.0"
   :go "filepath.IsAbs(path)"}
  [^String path])

(defn ^String join
  "Joins any number of path elements into a single path, adding a separator if necessary.
  Calls clean on the result; in particular, all empty strings are ignored. On Windows,
  the result is a UNC path if and only if the first path element is a UNC path."
  {:added "1.0"
   :go "filepath.Join(elems...)"}
  [& ^String elems])

(defn ^Boolean matches?
  "Reports whether name matches the shell file name pattern.
  Requires pattern to match all of name, not just a substring.
  Throws exception if pattern is malformed.
  On Windows, escaping is disabled. Instead, '\\' is treated as path separator."
  {:added "1.0"
   :go "! _res, err := filepath.Match(pattern, name); PanicOnErr(err)"}
  [^String pattern ^String name])

(defn ^String rel
  "Returns a relative path that is lexically equivalent to targpath when joined to basepath
  with an intervening separator. On success, the returned path will always be relative to basepath,
  even if basepath and targpath share no elements. An exception is thrown if targpath can't be made
  relative to basepath or if knowing the current working directory would be necessary to compute it.
  Calls clean on the result."
  {:added "1.0"
   :go "! _res, err := filepath.Rel(basepath, targpath); PanicOnErr(err)"}
  [^String basepath ^String targpath])

(defn split
  "Splits path immediately following the final separator, separating it into a directory and file name component.
  If there is no separator in path, returns an empty dir and file set to path. The returned values have
  the property that path = dir+file."
  {:added "1.0"
   :go "! _dir, _file := filepath.Split(path); _res := NewVectorFrom(MakeString(_dir), MakeString(_file))"}
  [^String path])

(defn ^{:tag [String]} split-list
  "Splits a list of paths joined by the OS-specific list-separator, usually found in PATH or GOPATH environment variables.
  Returns an empty slice when passed an empty string."
  {:added "1.0"
   :go "filepath.SplitList(path)"}
  [^String path])

(defn ^String to-slash
  "Returns the result of replacing each separator character in path with a slash ('/') character.
  Multiple separators are replaced by multiple slashes."
  {:added "1.0"
   :go "filepath.ToSlash(path)"}
  [^String path])

(defn ^String volume-name
  "Returns leading volume name. Given \"C:\\foo\\bar\" it returns \"C:\" on Windows. Given \"\\\\host\\share\\foo\"
  returns \"\\\\host\\share\". On other platforms it returns \"\"."
  {:added "1.0"
   :go "filepath.VolumeName(path)"}
  [^String path])

(def ^{:doc "OS-specific path separator."
       :added "1.0"
       :tag String
       :const true
       :go "string(filepath.Separator)"}
  separator)

(def ^{:doc "OS-specific path list separator."
       :added "1.0"
       :tag String
       :const true
       :go "string(filepath.ListSeparator)"}
  list-separator)
