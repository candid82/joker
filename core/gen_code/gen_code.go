package main

import (
	"fmt"
	"io/ioutil"
	"math"
	"reflect"
	"sort"
	"strconv"
	"strings"

	. "github.com/candid82/joker/core"
	_ "github.com/candid82/joker/std/string"
)

const hextable = "0123456789abcdef"
const masterFile = "a_code.go"
const codePattern = "a_%s_code.go"
const dataPattern = "a_%s_data.go"

type GenEnv struct {
	Statics   *[]string // For reflect-based code in gen_code
	Generated map[interface{}]struct{}
}

func newCodeEnv(cwe *CodeWriterEnv) *CodeEnv {
	return &CodeEnv{
		CodeWriterEnv: cwe,
		BaseMappings:  map[*string]*Var{},
		Namespace:     GLOBAL_ENV.CoreNamespace,
		Need:          map[string]Finisher{},
		Generated:     map[interface{}]interface{}{},
	}
}

func main() {
	// Hashmaps depend on the hashes of objects to find keys;
	// whereas this code (code.go, mainly) depends on stability of
	// data. Since object hashes depend (in some cases) on their
	// pointers, they're not always stable. So don't generate
	// hashmaps! TODO: Try removing this after other stuff done.
	HASHMAP_THRESHOLD = math.MaxInt64

	codeWriterEnv := &CodeWriterEnv{
		BaseStrings: StringPool{},
		Need:        map[string]Finisher{},
		Generated:   map[interface{}]interface{}{},
	}
	for k, v := range STRINGS {
		codeWriterEnv.BaseStrings[k] = v
	}
	InitInternalLibs()

	GLOBAL_ENV.FindNamespace(MakeSymbol("user")).ReferAll(GLOBAL_ENV.CoreNamespace)
	for _, f := range CoreSourceFiles {
		fileTemplate := `
// Generated by gen_code. Don't modify manually!

// +build fast_init

package core

func init() {
	{name}NamespaceInfo = internalNamespaceInfo{init: {name}Init, generated: {name}NamespaceInfo.generated, available: true}
}

{statics}
func {name}Init() {
{interns}
}
`[1:]

		GLOBAL_ENV.SetCurrentNamespace(GLOBAL_ENV.CoreNamespace)

		env := newCodeEnv(codeWriterEnv)

		for k, v := range env.Namespace.Mappings() {
			env.BaseMappings[k] = v
		}

		ProcessCoreSourceFileFor(f.Name)

		env.Emit()

		statics, interns := env.Statics, env.Interns

		name := f.Filename[0 : len(f.Filename)-5] // assumes .joke extension
		codeFile := fmt.Sprintf(codePattern, name)

		if codeFile <= masterFile {
			panic(fmt.Sprintf("I think Go initializes file-scopes vars alphabetically by filename, so %s must come after %s due to dependencies; rename accordingly",
				codeFile, masterFile))
		}
		fileContent := strings.Replace(strings.Replace(strings.ReplaceAll(fileTemplate, "{name}", name), "{statics}", statics, 1), "{interns}", interns, 1)
		ioutil.WriteFile(codeFile, []byte(fileContent), 0666)

		break // TODO: Process more than just core.joke
	}

	statics := []string{}

	env := &CodeEnv{
		CodeWriterEnv: codeWriterEnv,
		Namespace:     nil,
		Need:          map[string]Finisher{},
		Generated:     map[interface{}]interface{}{},
	}

	genEnv := &GenEnv{
		Statics:   &statics,
		Generated: map[interface{}]struct{}{},
	}

	for {
		needLen := len(codeWriterEnv.Need)

		for name, obj := range codeWriterEnv.Need {
			if _, ok := codeWriterEnv.Generated[name]; ok {
				continue
			}
			s := obj.Finish(name, env)
			codeWriterEnv.Generated[name] = struct{}{}
			if env.Interns != "" {
				panic(fmt.Sprintf("non-null interns for %s", masterFile))
			}
			if len(env.Need) != 0 {
				panic(fmt.Sprintf("non-null needs for %s", masterFile))
			}
			if s != "" {
				statics = append(statics, s)
			}
		}

		if len(codeWriterEnv.Need) <= needLen {
			break
		}
		fmt.Printf("ONE!! MORE!! TIME!! was %d now %d\n", needLen, len(env.Need))
	}

	stringMappings := []string{}
	for s, _ := range STRINGS {
		q := strconv.Quote(s)
		name := "s_" + NameAsGo(s)
		stringMappings = append(stringMappings, fmt.Sprintf(`
	%s: &%s,`[1:],
			q, name))
		statics = append(statics, fmt.Sprintf(`
var %s string = %s`[1:],
			name, q))
	}
	sort.Strings(stringMappings)

	symbolFields := genEnv.emitMembers("SYMBOLS", SYMBOLS)
	sort.Strings(symbolFields)

	specialSymbolMappings := genEnv.emitMembers("SPECIAL_SYMBOLS", SPECIAL_SYMBOLS)
	sort.Strings(specialSymbolMappings)

	keywordFields := genEnv.emitMembers("KEYWORDS", KEYWORDS)
	sort.Strings(keywordFields)

	strFields := genEnv.emitMembers("STR", STR)
	sort.Strings(strFields)

	typeMappings := []string{}
	typeFields := []string{}
	for s, _ := range TYPES {
		name := NameAsGo(*s)
		strName := "s_" + name
		typeName := "type_" + name
		typeMappings = append(typeMappings, fmt.Sprintf(`
	&%s: &%s,`[1:],
			strName, typeName))
		typeFields = append(typeFields, fmt.Sprintf(`
	%s: &%s,`[1:],
			name, typeName))
		statics = append(statics, fmt.Sprintf(`
var %s Type = %s`[1:],
			typeName, "Type{}"))
	}
	sort.Strings(typeMappings)
	sort.Strings(typeFields)

	sort.Strings(statics)
	r := JoinStringFns(env.Runtime)

	var tr = [][2]string{
		{"{keywordFields}", strings.Join(keywordFields, "\n")},
		{"{specialSymbolMappings}", strings.Join(specialSymbolMappings, "\n")},
		{"{strFields}", strings.Join(strFields, "\n")},
		{"{stringMappings}", strings.Join(stringMappings, "\n")},
		{"{symbolFields}", strings.Join(symbolFields, "\n")},
		{"{typeFields}", strings.Join(typeFields, "\n")},
		{"{typeMappings}", strings.Join(typeMappings, "\n")},
		{"{statics}", strings.Join(statics, "\n")},
		{"{runtime}", r},
	}

	fileContent := `
// Generated by gen_code. Don't modify manually!

// +build fast_init

package core

var KEYWORDS Keywords = Keywords{
{keywordFields}
}

var SPECIAL_SYMBOLS map[*string]bool = map[*string]bool{
{specialSymbolMappings}
}

var STR Str = Str{
{strFields}
}

var STRINGS StringPool = StringPool{
{stringMappings}
}

var SYMBOLS Symbols = Symbols{
{symbolFields}
}

var TYPE Types = Types{
{typeFields}
}

var TYPES map[*string]*Type = map[*string]*Type{
{typeMappings}
}

{statics}

func init() {
{runtime}
}
`[1:]

	for _, t := range tr {
		fileContent = strings.Replace(fileContent, t[0], t[1], 1)
	}

	ioutil.WriteFile(masterFile, []byte(fileContent), 0666)
}

func (genEnv *GenEnv) emitMembers(name string, obj interface{}) (fields []string) {
	v := reflect.ValueOf(obj)
	kind := v.Kind()
	switch kind {
	case reflect.Map:
		if v.IsNil() {
			return
		}
		keys := v.MapKeys()
		for _, key := range keys {
			k := genEnv.emitValue(key)
			v := genEnv.emitValue(v.MapIndex(key))
			if v == "" {
				continue
			}
			fields = append(fields, fmt.Sprintf(`
	%s: %s,`[1:],
				k, v))
		}
	case reflect.Struct:
		vt := v.Type()
		numFields := v.NumField()
		for i := 0; i < numFields; i++ {
			vtf := vt.Field(i)
			val := genEnv.emitValue(UnsafeReflectValue(v.Field(i)))
			if val == "" {
				continue
			}
			fields = append(fields, fmt.Sprintf(`
	%s: %s,`[1:],
				vtf.Name, val))
		}
	default:
		panic(fmt.Sprintf("unsupported type %T for %s", obj, name))
	}
	return
}

func (genEnv *GenEnv) emitValue(v reflect.Value) string {
	v = UnsafeReflectValue(v)
	if v.IsZero() {
		return ""
	}
	switch v.Kind() {
	case reflect.Bool:
		if v.Bool() {
			return "true"
		}
		return "false"
	case reflect.Uint32:
		return fmt.Sprintf("%d", v.Uint())
	case reflect.String:
		return "s_" + NameAsGo(v.String())
	case reflect.Ptr:
		res := genEnv.emitValue(v.Elem())
		if res == "" {
			return ""
		}
		return "&" + res
	case reflect.Struct:
		typeName := coreTypeName(v)
		obj := v.Interface()
		if obj == nil {
			return ""
		}
		name := uniqueId(obj)
		if _, yes := genEnv.Generated[name]; !yes {
			*genEnv.Statics = append(*genEnv.Statics, fmt.Sprintf(`
var %s %s = %s{
	%s
}`[1:],
				name, typeName, typeName, strings.Join(genEnv.emitMembers(typeName, obj), "\n")))
			genEnv.Generated[name] = struct{}{}
		}
		return name
	default:
		return fmt.Sprintf("nil /* UNKNOWN TYPE obj=%T v=%s vt=%s */", v.Interface(), v, v.Type())
	}
}

func coreTypeName(v reflect.Value) string {
	return strings.Replace(v.Type().String(), "core.", "", 1)
}

func uniqueId(obj interface{}) string {
	return UniqueId(obj, nil)
}
