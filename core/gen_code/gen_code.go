package main

import (
	"fmt"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"

	. "github.com/candid82/joker/core"
	_ "github.com/candid82/joker/std/string"
)

const hextable = "0123456789abcdef"
const masterFile = "a_code.go"
const codePattern = "a_%s_code.go"
const dataPattern = "a_%s_data.go"

func newCodeEnv(cwe *CodeWriterEnv) *CodeEnv {
	return &CodeEnv{
		CodeWriterEnv: cwe,
		BaseMappings:  map[*string]*Var{},
		Namespace:     GLOBAL_ENV.CoreNamespace,
		Need:          map[string]Finisher{},
		Generated:     map[interface{}]interface{}{},
	}
}

func main() {
	// Hashmaps depend on the hashes of objects to find keys;
	// whereas this code (code.go, mainly) depends on stability of
	// data. Since object hashes depend (in some cases) on their
	// pointers, they're not always stable. So don't generate
	// hashmaps! TODO: Try removing this after other stuff done.
	HASHMAP_THRESHOLD = math.MaxInt64

	codeWriterEnv := &CodeWriterEnv{
		BaseStrings: StringPool{},
		Need:        map[string]Finisher{},
		Generated:   map[interface{}]interface{}{},
	}
	for k, v := range STRINGS {
		codeWriterEnv.BaseStrings[k] = v
	}
	InitInternalLibs()

	GLOBAL_ENV.FindNamespace(MakeSymbol("user")).ReferAll(GLOBAL_ENV.CoreNamespace)
	for _, f := range CoreSourceFiles {
		fileTemplate := `
// Generated by gen_code. Don't modify manually!

// +build fast_init

package core

func init() {
	{name}NamespaceInfo = internalNamespaceInfo{init: {name}Init, generated: {name}NamespaceInfo.generated, available: true}
}

{statics}
func {name}Init() {
{interns}
}
`[1:]

		GLOBAL_ENV.SetCurrentNamespace(GLOBAL_ENV.CoreNamespace)

		env := newCodeEnv(codeWriterEnv)

		for k, v := range env.Namespace.Mappings() {
			env.BaseMappings[k] = v
		}

		ProcessCoreSourceFileFor(f.Name)

		env.Emit()

		statics, interns := env.Statics, env.Interns

		name := f.Filename[0 : len(f.Filename)-5] // assumes .joke extension
		codeFile := fmt.Sprintf(codePattern, name)
		dataFile := fmt.Sprintf(dataPattern, name)

		if codeFile <= masterFile {
			panic(fmt.Sprintf("I think Go initializes file-scopes vars alphabetically by filename, so %s must come after %s due to dependencies; rename accordingly",
				codeFile, masterFile))
		}
		fileContent := strings.Replace(strings.Replace(strings.ReplaceAll(fileTemplate, "{name}", name), "{statics}", statics, 1), "{interns}", interns, 1)
		ioutil.WriteFile(codeFile, []byte(fileContent), 0666)

		os.Remove(dataFile)

		break // TODO: Process more than just core.joke
	}

	statics := []string{}

	env := &CodeEnv{
		CodeWriterEnv: codeWriterEnv,
		Namespace:     nil,
		Need:          map[string]Finisher{},
		Generated:     map[interface{}]interface{}{},
	}

	for {
		needLen := len(codeWriterEnv.Need)

		for name, obj := range codeWriterEnv.Need {
			if _, ok := codeWriterEnv.Generated[name]; ok {
				continue
			}
			s := obj.Finish(name, env)
			codeWriterEnv.Generated[name] = struct{}{}
			if env.Interns != "" {
				panic(fmt.Sprintf("non-null interns for %s", masterFile))
			}
			if len(env.Need) != 0 {
				panic(fmt.Sprintf("non-null needs for %s", masterFile))
			}
			if s != "" {
				statics = append(statics, s)
			}
		}

		if len(codeWriterEnv.Need) <= needLen {
			break
		}
		fmt.Printf("ONE!! MORE!! TIME!! was %d now %d\n", needLen, len(env.Need))
	}

	stringMappings := []string{}
	for s, _ := range STRINGS {
		q := strconv.Quote(s)
		name := "s_" + NameAsGo(s)
		stringMappings = append(stringMappings, fmt.Sprintf(`
	%s: &%s,`[1:],
			q, name))
		statics = append(statics, fmt.Sprintf(`
var %s string = %s
`[1:],
			name, q))
	}
	sort.Strings(stringMappings)

	typeMappings := []string{}
	for s, _ := range TYPES {
		name := NameAsGo(*s)
		strName := "s_" + name
		typeName := "type_" + name
		typeMappings = append(typeMappings, fmt.Sprintf(`
	&%s: &%s,`[1:],
			strName, typeName))
		statics = append(statics, fmt.Sprintf(`
var %s Type = %s
`[1:],
			typeName, "Type{}"))
	}
	sort.Strings(typeMappings)

	sort.Strings(statics)
	r := JoinStringFns(env.Runtime)

	var tr = [][2]string{
		{"{stringMappings}", strings.Join(stringMappings, "\n")},
		{"{typeMappings}", strings.Join(typeMappings, "\n")},
		{"{statics}", strings.Join(statics, "")},
		{"{runtime}", r},
	}

	fileContent := `
// Generated by gen_code. Don't modify manually!

// +build fast_init

package core

var STRINGS StringPool = StringPool{
{stringMappings}
}

var TYPES map[*string]*Type = map[*string]*Type{
{typeMappings}
}

{statics}

func init() {
{runtime}
}
`[1:]

	for _, t := range tr {
		fileContent = strings.Replace(fileContent, t[0], t[1], 1)
	}

	ioutil.WriteFile(masterFile, []byte(fileContent), 0666)
}
